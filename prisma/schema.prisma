// Prisma Schema for the DJOKWA ERP School Management
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  Male
  Female
}

enum RelationType {
  Mother
  Father
  Guardian
  Other
}

enum EvaluationType {
  Exam
  Assignment
  Quiz
  Project
  Other
}

enum ProgressStatus {
  NotStarted
  InProgress
  Completed
}

enum LeaveStatus {
  Pending
  Approved
  Denied
}

enum AbsenceStatus {
  PRESENT
  ABSENT
  LATE
  LEAVE
}

enum Days {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum LeaveType {
  Vacation
  SickLeave
  MaternityLeave
  PaternityLeave
  Other
}

model SchoolYear {
  Id Int      @id @default(autoincrement())
  Start_date  DateTime
  End_date    DateTime
  year        String //e.g. "2024-2025"

  Registrations Registration[]
}

model Registration {
  Id   Int      @id @default(autoincrement())
  Registration_Date DateTime
  Student_ID        Int
  Academic_ID       Int

  Student       Student    @relation(fields: [Student_ID], references: [Id])
  Academic_Year SchoolYear @relation(fields: [Academic_ID], references: [Id])

  @@index([Student_ID])
  @@index([Academic_ID])
}

model Student {
  Id    Int      @id @default(autoincrement())
  First_Name    String
  Last_Name     String
  Date_Of_Birth DateTime
  Gender        Gender
  Address       String
  classId       Int
  Phone         String?
  Medical_Info  String?
  Image         String?

  ParentRelations ParentRelation[]
  assignments     Assignment[]
  submissions     Submission[]
  course          Course[]
  Registrations   Registration[]
  Grades          Grade[]
  Evaluations     Evaluation[]
  Absences        Absence[]
  Latenesses      Lateness[]
  Disciplines     Discipline[]
  Transcripts     Transcript[]
  payment         Payment[]
  user_role       user_roles[]

  classes  Classes    @relation(fields: [classId], references: [Id])
  Incident Incident[]

  @@index([classId])
}

model ParentRelation {
  Id Int          @id @default(autoincrement())
  Parent_ID         Int
  Student_ID        Int
  Relation_Type     RelationType

  Parent  Parent  @relation(fields: [Parent_ID], references: [Id])
  Student Student @relation(fields: [Student_ID], references: [Id])

  @@index([Parent_ID])
  @@index([Student_ID])
}

model Parent {
  Id       Int              @id @default(autoincrement())
  Last_Name       String
  First_Name      String
  Profession      String?
  Address         String
  Email           String           @unique
  Phone           String?
  NIC_Information String?
  password        String

  Relations       ParentRelation[]
  user_role          user_roles[]
}

// Teacher Model
model Teacher {
  Id  Int      @id @default(autoincrement())
  Last_Name   String
  First_Name  String
  Email       String   @unique
  Phone       String   @unique
  Specialty   String
  Hiring_Date DateTime
  Image       String?
  Salary      Float
  password    String
  gender      Gender
  address     String

  user_role    user_roles[]
  Courses       Course[]
  Leaves        Leaves[]
  Assignment    Assignment[]
  Submission    Submission[]
  RHEvaluations RHEvaluation[]
  PaySleeps     PaySleep[]
  Disciplines   Discipline[]
  classes       Classes[]
  abscences     Absence[]
}

// User's role
model user_roles {
  Id         Int  @id @default(autoincrement())
  teacher_id Int? @unique
  student_id Int? @unique
  staff_id   Int? @unique
  parent_id   Int? @unique
  role_id    Int

  teachers Teacher?   @relation(fields: [teacher_id], references: [Id], onDelete: Cascade)
  roles    roles      @relation(fields: [role_id], references: [Id])
  students Student?   @relation(fields: [student_id], references: [Id], onDelete: Cascade)
  staffs   Personnel? @relation(fields: [staff_id], references: [Id], onDelete: Cascade)
  parents Parent?     @relation(fields: [parent_id], references: [Id], onDelete: Cascade)

  @@index([teacher_id])
  @@index([staff_id])
  @@index([student_id])
  @@index([parent_id])
  @@index([role_id])
}

// Roles
model roles {
  Id         Int      @id @default(autoincrement())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_role user_roles[]
}

model Chapter {
  Id      Int            @id @default(autoincrement())
  Name            String
  Description     String?
  Coefficient     Int
  Start_Date      DateTime
  End_Date        DateTime
  Progress_Status ProgressStatus
  Course_ID       Int

  Course Course @relation(fields: [Course_ID], references: [Id])

  @@index([Course_ID])
}

model Grade {
  Id     Int   @id @default(autoincrement())
  Value        Float
  Student_ID   Int
  Course_ID    Int
  assignmentId Int

  Student Student @relation(fields: [Student_ID], references: [Id])
  Course  Course  @relation(fields: [Course_ID], references: [Id])

  @@index([Student_ID])
  @@index([Course_ID])
}

model Evaluation {
  Id Int            @id @default(autoincrement())
  Type          EvaluationType
  Start_Date    DateTime
  End_Date      DateTime
  Description   String?
  Student_ID    Int

  Student Student @relation(fields: [Student_ID], references: [Id])

  @@index([Student_ID])
}

model Transcript {
  Id Int     @id @default(autoincrement())
  Name          String
  Logo          String?
  Student_ID    Int
  Course_ID     Int

  Student Student @relation(fields: [Student_ID], references: [Id])
  Course  Course  @relation(fields: [Course_ID], references: [Id])

  @@index([Student_ID])
  @@index([Course_ID])
}

model Absence {
  Id    Int           @id @default(autoincrement())
  Absence_Date  DateTime
  Absence_Time  Float?
  class_id      Int
  note          String?
  Justification String?
  Status        AbsenceStatus
  Student_ID    Int
  teacher_id    Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Student Student @relation(fields: [Student_ID], references: [Id])
  Teacher Teacher @relation(fields: [teacher_id], references: [Id])
  class   Classes @relation(fields: [class_id], references: [Id], onDelete: Cascade)

  @@index([Student_ID])
  @@index([teacher_id])
  @@index([class_id])
}

model Lateness {
  Id   Int      @id @default(autoincrement())
  Lateness_Date DateTime
  Lateness_Time Float?
  Justification String?
  Student_ID    Int

  Student Student @relation(fields: [Student_ID], references: [Id])

  @@index([Student_ID])
}

model Discipline {
  Id Int     @id @default(autoincrement())
  Sanction      String?
  Justification String?
  Student_ID    Int
  Teacher_ID    Int

  Teacher Teacher @relation(fields: [Teacher_ID], references: [Id])
  Student Student @relation(fields: [Student_ID], references: [Id])

  @@index([Teacher_ID])
  @@index([Student_ID])
}

model Schedule {
  Id Int      @id @default(autoincrement())
  Day         Days
  Start_Time  DateTime
  End_Time    DateTime
  Room_ID     Int
  Course_ID   Int

  Room   Room   @relation(fields: [Room_ID], references: [Id])
  Course Course @relation(fields: [Course_ID], references: [Id])

  @@index([Room_ID])
  @@index([Course_ID])
}

model Room {
  Id Int    @id @default(autoincrement())
  Name    String

  Schedules Schedule[]
}

model Payment {
  Id   Int      @id @default(autoincrement())
  Amount       Float
  Payment_Date DateTime
  Student_ID   Int
  Service_ID   Int

  Student Student @relation(fields: [Student_ID], references: [Id])
  Service Service @relation(fields: [Service_ID], references: [Id])

  @@index([Student_ID])
  @@index([Service_ID])
}

model Service {
  Id Int     @id @default(autoincrement())
  Name       String
  Logo       String?

  Payments Payment[]
}

model Event {
  Id Int     @id @default(autoincrement())
  Name     String
  Logo     String?
}

// Personnel Model 
model Personnel {
  Id   Int    @id @default(autoincrement())
  Email      String @unique
  Staff_Role String
  password   String

  Leaves        Leaves[]
  RHEvaluations RHEvaluation[]
  PaySleeps     PaySleep[]
  user_role     user_roles[]
}

// PaySleep Model (Payroll or Salary Slips)
model PaySleep {
  Id  Int            @id @default(autoincrement())
  FirstName    String
  LastName     String
  //JerseyNum    String
  //Position     String
  Pay_Date     DateTime? // Optional and populated only when payment is done Completed
  Create_Date  DateTime       @default(now())
  Amount       Float
  Status       ProgressStatus
  Personnel_ID Int?
  Teacher_ID   Int?
  Budget_ID    Int?

  Personnel Personnel? @relation(fields: [Personnel_ID], references: [Id]) 
  Teacher   Teacher?   @relation(fields: [Teacher_ID], references: [Id]) 
  Budget    Budget?    @relation(fields: [Budget_ID], references: [Id])

  @@index([Personnel_ID])
  @@index([Teacher_ID])
  @@index([Budget_ID])
}

// Warehouse Model (Storage locations)
model Warehouse {
  Id Int       @id @default(autoincrement())
  Name         String
  Location     String
  Products     Product[]
}

// Product Model (Items stored in the warehouse)
model Product {
  Id   Int    @id @default(autoincrement())
  Name         String
  Category     String
  Quantity     Int
  Price        Float
  Warehouse_ID Int

  Warehouse Warehouse @relation(fields: [Warehouse_ID], references: [Id])

  @@index([Warehouse_ID])
}

// Leaves Model (Employee leave records)
model Leaves {
  Id     Int         @id @default(autoincrement())
  FirstName    String
  LastName     String
  JerseyNum    String?
  Start_Date   DateTime    @default(now())
  End_Date     DateTime
  Type         LeaveType
  Personnel_ID Int?
  Teacher_ID   Int?
  Status       LeaveStatus
  Personnel    Personnel?  @relation(fields: [Personnel_ID], references: [Id])
  Teacher      Teacher?    @relation(fields: [Teacher_ID], references: [Id])

  @@index([Personnel_ID])
  @@index([Teacher_ID])
}

// RHEvaluation Model (Human resource evaluations)
model RHEvaluation {
  Id Int      @id @default(autoincrement())
  FirstName       String
  LastName        String
  JerseyNum       String
  Position        String
  Evaluation_Date DateTime
  Score           Int
  Comments        String?
  Personnel_ID    Int?
  Teacher_ID      Int?

  Personnel Personnel? @relation(fields: [Personnel_ID], references: [Id]) 
  Teacher   Teacher?   @relation(fields: [Teacher_ID], references: [Id]) 

  @@index([Personnel_ID])
  @@index([Teacher_ID])
}

// Budget Model (Financial allocation)
model Budget {
  Id   Int        @id @default(autoincrement())
  Name        String
  Description String
  Amount      Float
  Year        String // e.g., "2024"
  Expenses    Expenses[]
  PaySleeps   PaySleep[]
}

// Expenses Model (Tracking expenses)
model Expenses {
  Id  Int      @id @default(autoincrement())
  Name        String
  Description String?
  Amount      Float
  Date        DateTime
  Budget_ID   Int

  Budget Budget @relation(fields: [Budget_ID], references: [Id])

  @@index([Budget_ID])
}

// Income Model (Tracking revenue)
model Income {
  Id   Int      @id @default(autoincrement())
  Name        String
  Description String?
  Amount      Float
  Date        DateTime
}

model Classes {
  Id          Int    @id @default(autoincrement())
  name              String
  classCode         String @unique
  teacherId         Int
  capacity          Int
  currentEnrollment Int    @default(0)

  Courses     Course[]
  Assignment Assignment[]
  class_attendance Absence[]
  Student    Student[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  Teacher    Teacher      @relation(fields: [teacherId], references: [Id])

  @@index([teacherId])
}

model Course {
  Id   Int      @id @default(autoincrement())
  Name        String
  courseCode  Int
  Coefficient Int
  Start_Date  DateTime
  End_Date    DateTime
  Teacher_ID  Int
  Class_Level Int
  Class_ID    Int

  Chapters   Chapter[]
  Schedules  Schedule[]
  Student    Student[]
  Grades     Grade[]
  transcript Transcript[]
  Assignment Assignment[]
  Teacher    Teacher      @relation(fields: [Teacher_ID], references: [Id])
  classes      Classes      @relation(fields: [Class_ID], references: [Id])

  @@index([Teacher_ID])
  @@index([Class_ID])
}

model Assignment {
  Id Int      @id @default(autoincrement())
  dueDate       DateTime
  title         String
  description   String
  classId       Int
  courseId      Int
  teacherId     Int

  Submission Submission[]
  Student    Student[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  Teacher    Teacher      @relation(fields: [teacherId], references: [Id])
  Class      Classes        @relation(fields: [classId], references: [Id])
  Course     Course       @relation(fields: [courseId], references: [Id])

  @@index([teacherId])
  @@index([classId])
  @@index([courseId])
}

model Submission {
  Id Int      @id @default(autoincrement())
  teacherId    Int  
  studentId    Int
  assignmentId Int
  fileUrl      String
  submittedAt  DateTime @default(now())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  teacher    Teacher    @relation(fields: [teacherId], references: [Id])
  student    Student    @relation(fields: [studentId], references: [Id])
  assignment Assignment @relation(fields: [assignmentId], references: [Id])

  @@index([teacherId])
  @@index([studentId])
  @@index([assignmentId])
}

model BlockNote {
  Id         Int       @id @default(autoincrement())
  task       String
  isComplete Boolean   @default(false)
  deadline   DateTime?
  note       String?
  title      String
  createdAt  DateTime  @default(now())
}

model Incident {
  Id                Int      @id @default(autoincrement())
  Student_ID                 Int
  place                      String
  witness                    String
  description                String   @default("Pending")
  disciplinary_recomendation String?
  DateTime                   DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  // Foreign key relationship
  student Student @relation(fields: [Student_ID], references: [Id])

  @@index([Student_ID])
}

model SchoolEvent {
  Id    Int       @id @default(autoincrement())
  venue       String
  organizer   String
  date        DateTime
  description String
  fieldTrip   String
}

model TokenBlacklist {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
}
